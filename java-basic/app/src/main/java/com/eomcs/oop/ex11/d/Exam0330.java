// 로컬 클래스에서 메서드에 선언된 로컬 변수 접근하기
package com.eomcs.oop.ex11.d;

class D3 {

  void m1() {
    final int v1 = 1;
    int v2 = 2;
    int v3 = 3;

    class X {
      void f() {
        // 로컬 클래스에서는 바깥 메서드의 로컬 변수를 사용할 수 있다.
        // 1) final 로 선언된 경우
        System.out.printf("v1 = %d\n", v1);

        // 2) final 로 선언된 것은 아니지만 값을 한 번만 할당한 경우.
        System.out.printf("v2 = %d\n", v2);

        // => 값을 여러 번 할당한 경우에는 접근할 수 없다.
        System.out.printf("v3 = %d\n", v3); // 컴파일 오류!

        // 결론!
        // - 상수 값이거나 상수에 준하는 경우(값을 한 번만 할당한 경우)
        // 로컬 클래스에서 메서드의 로컬 변수를 사용할 수 있다.
        // - 즉 로컬 클래스에서 바깥 메서드의 로컬 변수를 사용하는 상황?
        // 값을 조회하는 용도할 때.
        // - 왜?
        // 로컬 객체가 사용하는 로컬 변수는
        // 메서드 호출이 끝났을 때 제거되기 때문이다.
      }
    }

    X obj = new X();
    // 로컬 클래스 X의 객체를 만들 땐 v3 값 3이었으나 X.f() 호출 전에 v3변수 값 변경
    // 물론 X 인스턴스 obj에는 이전값인 3이 저장되어 있음!
    // 그러나 개발자 입장에서는 X.f()를 호출할 때
    // 1) 30으로 변경된 값이 사용될 것이라고 판단 가능
    // 2) v3 값 변경 전 X객체 만들었기 때문에 v3의 값은 계속 3이라고 판단 가능
    // -> 이런 혼란스러운 상황을 피하기 위해 로컬 클래스에서 enclosing 메서드의 변수를 사용할 때는
    // 해당 변수를 변경하지 않는 경우에만 허락하도록 규칙이 정해져 있다.
    // v3 = 30;
    obj.f();
  }
}


public class Exam0330 {

  public static void main(String[] args) {
    D3 obj = new D3();
    obj.m1();
  }

}
